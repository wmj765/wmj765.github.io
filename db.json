{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":0,"renderable":0},{"_id":"source/img/ironman-draw.png","path":"img/ironman-draw.png","modified":0,"renderable":0},{"_id":"source/img/ironman-draw1.png","path":"img/ironman-draw1.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/header_img/tf-logo-dark.png","path":"img/header_img/tf-logo-dark.png","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/header_img/kobe.png","path":"img/header_img/kobe.png","modified":0,"renderable":0},{"_id":"source/img/beantech-desktop.png","path":"img/beantech-desktop.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.png","path":"img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8d0d831a77fe92a9e1530366ed90dec6d73d3aef","modified":1555395809733},{"_id":"source/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1555395809736},{"_id":"themes/beantech/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1555395809866},{"_id":"themes/beantech/_config.yml","hash":"f0796b8e85fe6b3154a5fa442420003fe18dff0a","modified":1555395809868},{"_id":"source/_posts/ava基础之集合框架-Collection及Map顶级接口.md","hash":"16f9da5183fd8a480de70b029d2b36512f1b1d69","modified":1555583410308},{"_id":"source/_posts/hexo-theme-beantech.md","hash":"f6ba0d2ef6b776a8511effd8ec1c0b6c62ae9a88","modified":1555553515443},{"_id":"source/_posts/你好，hexo.md","hash":"3e7f01133acbe41a3e062badf1a443919fbf7dbb","modified":1561796621936},{"_id":"source/_posts/ysql-拆分以逗号隔开的字段并应用在in查询.md","hash":"b560bb62da8c59ddadb6248f61077b73366667e1","modified":1555583279979},{"_id":"source/about/index.md","hash":"d4cf7207ded88c694ff6f620f36ce1b9774f1eee","modified":1555395809761},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1555395809840},{"_id":"source/archive/index.md","hash":"21806fd262da492f2634d224f5846ccee9cd3b45","modified":1555395809763},{"_id":"source/tags/index.md","hash":"a4cdcade4001fdc71547462e0bd7feedee96038b","modified":1555395809862},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1555395809871},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1555395809873},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1555395809875},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1555395809877},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1555395809880},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1555395809882},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1555395809884},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1555395809886},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1555395809888},{"_id":"themes/beantech/layout/404.ejs","hash":"c9b488d74c21fe9f35f642a5d19a138099ddf8a8","modified":1555395809892},{"_id":"themes/beantech/layout/about.ejs","hash":"96c08fc3580b842ad9d8f37f2cdf02e6fa57d7bc","modified":1555395809924},{"_id":"themes/beantech/layout/archive.ejs","hash":"62781e8b0ce4de9c3db6042fedeaf13c26d138f8","modified":1555395809926},{"_id":"themes/beantech/layout/index.ejs","hash":"f293cefe4bf9f9c6848dff08b6dac4aeb7948892","modified":1555395809928},{"_id":"themes/beantech/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1555395809931},{"_id":"themes/beantech/layout/layout.ejs","hash":"389fc11a45676f94b77ebd2cb0d658a0358979c8","modified":1555395809933},{"_id":"themes/beantech/layout/page.ejs","hash":"f7fc5282ad55131aa67dcde03c9189faa450a7c9","modified":1555395809935},{"_id":"themes/beantech/layout/post.ejs","hash":"5a408fd5d759e70dc95c23a993550cee7d1c6cd5","modified":1555395809937},{"_id":"themes/beantech/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1555395809939},{"_id":"source/_discarded/ded/Untitled.md","hash":"ab15318924336ad9e0f101db6c95d0e4bf9df351","modified":1555583271907},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1555395809768},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"6739744e71fc211a9e7c05c71c42b240c1f5abf7","modified":1555395809895},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"9aea336d3907735eedabcfb21c286cd54a01f45f","modified":1555395809900},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"258af22c0c8d5dce3f218f4cc8b2220f38a841b9","modified":1555395809897},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1555395809902},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1555395809904},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1555395809907},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"a765433a33b3613f4664de2da48d0c58f68f8cd6","modified":1555395809909},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1555395809911},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1555395809914},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"e29431fa78c81d7c521bb1f7be356651fcde959c","modified":1555395809916},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"b185fcffb0d181ddd9eb2259af38cf7d82fb2846","modified":1555395809918},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"814dd716083a8a75eb31f9d2d6ab28150b01c533","modified":1555395809920},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"91288381dbd98f1c6b91d419094934ff59437021","modified":1555395809922},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1555395809974},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1555395809980},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1555395809982},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1555395809985},{"_id":"themes/beantech/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1555395809943},{"_id":"themes/beantech/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1555395809944},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1555395809947},{"_id":"themes/beantech/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1555395809956},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1555395809958},{"_id":"themes/beantech/source/css/rocket.styl","hash":"0abbccdbcd6cce70e8a0bab7152c38adc0b708f1","modified":1555395809965},{"_id":"themes/beantech/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1555395809967},{"_id":"themes/beantech/source/css/toc.styl","hash":"822aca17c885109452cc75a9aa384d9f3c07ea81","modified":1555395809969},{"_id":"themes/beantech/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1555395809971},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1555395809990},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1555395809995},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1555395809992},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1555395810004},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1555395810007},{"_id":"themes/beantech/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1555395810009},{"_id":"themes/beantech/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1555395810010},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1555395809785},{"_id":"source/img/ironman-draw.png","hash":"8edb8d0e75e27c727540a06e6b76de69b7348252","modified":1548591943607},{"_id":"source/img/ironman-draw1.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1555395809844},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1555395809977},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1555395809952},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1555395809988},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1555395810002},{"_id":"source/_posts/ava基础之集合框架-Collection及Map顶级接口/home_posts_tag-false.png","hash":"86a3a4320012981f2d42eabc6ea172425f2f941a","modified":1555395809754},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-false.png","hash":"86a3a4320012981f2d42eabc6ea172425f2f941a","modified":1555395809754},{"_id":"source/_posts/ysql-拆分以逗号隔开的字段并应用在in查询/home_posts_tag-false.png","hash":"86a3a4320012981f2d42eabc6ea172425f2f941a","modified":1555395809754},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1555395809781},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1555395809857},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1555395809950},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1555395809961},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1555395809963},{"_id":"source/_posts/ava基础之集合框架-Collection及Map顶级接口/home_posts_tag-true.png","hash":"a704520b43f26b88d650098f60689af3af5eb106","modified":1555395809758},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-true.png","hash":"a704520b43f26b88d650098f60689af3af5eb106","modified":1555395809758},{"_id":"source/_posts/ysql-拆分以逗号隔开的字段并应用在in查询/home_posts_tag-true.png","hash":"a704520b43f26b88d650098f60689af3af5eb106","modified":1555395809758},{"_id":"source/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1555395809838},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1555395809850},{"_id":"themes/beantech/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1555395809999},{"_id":"source/img/header_img/kobe.png","hash":"196d889db98fc89c469d7a80f2987d9620432dd4","modified":1548592038696},{"_id":"source/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1555395809777},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1555395809834},{"_id":"source/_posts/ava基础之集合框架-Collection及Map顶级接口/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1555395809750},{"_id":"source/_posts/ysql-拆分以逗号隔开的字段并应用在in查询/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1555395809750},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1555395809750},{"_id":"source/img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1555395809824},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1555395809824},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1555395809812},{"_id":"source/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1555395809799},{"_id":"source/_drafts/你好，hexo.md","hash":"3e7f01133acbe41a3e062badf1a443919fbf7dbb","modified":1561796618533}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2019-04-17T09:34:34.738Z","updated":"2019-04-16T06:23:29.733Z","path":"404.html","title":"","comments":1,"_id":"cjxg84hra0000g8x1ge7bq7zd","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"Wish for the Best, Prepare for the Worst","header-img":"img/header_img/Iron-Man-3.jpg","comments":1,"_content":"\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Wish for the Best, Prepare for the Worst\"\nheader-img: \"img/header_img/Iron-Man-3.jpg\"\ncomments: true\n---\n\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n","updated":"2019-04-16T06:23:29.761Z","path":"about/index.html","_id":"cjxg84hs30002g8x1r39i7rm7","content":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2019-04-16T06:23:29.862Z","updated":"2019-04-16T06:23:29.862Z","path":"tags/index.html","comments":1,"_id":"cjxg84ht0000ag8x1uizezrbe","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2019-04-16T06:23:29.763Z","path":"archive/index.html","_id":"cjxg84ht1000bg8x1gy5h5an3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"[Hexo] Theme BeanTech","catalog":true,"subtitle":"This is hexo theme Demo.","header-img":"Demo.png","catagories":["Hexo"],"date":"2019-03-18T02:51:00.000Z","_content":"> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n> \n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\nhttps://github.com/wmj765/wmj765.github.io.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/wmj765/wmj765.github.io\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/wmj765\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!","source":"_posts/hexo-theme-beantech.md","raw":"title: '[Hexo] Theme BeanTech'\ncatalog: true\nsubtitle: This is hexo theme Demo.\nheader-img: Demo.png\ntags:\n  - Hexo\n  - Blog\ncatagories:\n  - Hexo\ncategories: []\ndate: 2019-03-18 10:51:00\n---\n> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n> \n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\nhttps://github.com/wmj765/wmj765.github.io.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/wmj765/wmj765.github.io\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/wmj765\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!","slug":"hexo-theme-beantech","published":1,"updated":"2019-04-18T02:11:55.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxg84hry0001g8x10fxrby8j","content":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><span id=\"live-demo\"></span></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1><span id=\"usage\">Usage</span></h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2><span id=\"init\">Init</span></h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/wmj765/wmj765.github.io.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2><span id=\"modify\">Modify</span></h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3><span id=\"deployment\">Deployment</span></h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"sidebar-settings\">Sidebar settings</span></h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3><span id=\"signature-setup\">Signature Setup</span></h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"go-to-top-icon-setup\">Go to top icon Setup</span></h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3><span id=\"post-tag\">Post tag</span></h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3><span id=\"markdown-render\">Markdown render</span></h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"hexo-basics\">Hexo Basics</span></h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"have-fun-_\">Have fun ^_^</span></h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/wmj765/wmj765.github.io\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/wmj765\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">Live Demo</a></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1>Usage</h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2>Init</h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/wmj765/wmj765.github.io.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2>Modify</h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3>Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3>Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3>Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3>Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2>Hexo Basics</h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1>Have fun ^_^</h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/wmj765/wmj765.github.io\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/wmj765\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n"},{"title":"hexo+github博客从搭建到部署到更换电脑快速切换","catalog":true,"date":"2019-06-28T13:19:00.000Z","subtitle":null,"header-img":null,"_content":"","source":"_posts///你好，hexo.md","raw":"title: hexo+github博客从搭建到部署到更换电脑快速切换\ncatalog: true\ntags: []\ncategories: []\ndate: 2019-06-28 21:19:00\nsubtitle:\nheader-img:\n---\n### hexo+github博客搭建\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n- Node.js (Should be at least nodejs 6.9)\n- Git\n\n##### Windows 用户\n对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n您也可以下载[安装程序](http://nodejs.org/)来安装。\n#### 安装hexo\n```\n npm install -g hexo-cli\n\n```\n请参考官网教程来搭建\n[官网教程](https://hexo.io/zh-cn/)\n\n### 更换电脑hexo快速切换\n请参照教程[教程](https://blog.csdn.net/heimu24/article/details/81210640)\n","slug":"你好，hexo","published":0,"updated":"2019-06-29T08:23:41.931Z","_id":"cjxg84hs40003g8x1fc9zglia","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"java基础之集合框架--Collection及Map顶级接口","catalog":true,"author":"wangmj","date":"2019-04-18T10:29:27.000Z","subtitle":null,"header-img":"Demo.png","_content":"# java基础之集合框架--Collection及Map顶级接口\n\n最近看了百度的面试题，面试内容基本都是基础知识，好多问题没有答好，所以定个小目标，在年前争取把java主流的基础知识都巩固一遍；那就以使用最频繁的集合框架开始。\n\n\n## Collection及Map类图\n### collection类图\n![Collection类图](http://img.blog.csdn.net/20171030131133723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd21qNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看出来，Collection下的子接口有三个分别为Set,List,Queue，其中Set为无序的且不可重复的集合，List为有序可重复的集合，queue为先入先出的队列。\n\n### Map类图\n![这里写图片描述](http://img.blog.csdn.net/20171030131940860?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd21qNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\ncollection接口主要包含的方法如下：add()、addAll()、contain()、remove()、hashCode()、size()、toArray()等方法\n\n关于Collection接口方面百度的技术面试主要问题：\nCollection有哪些子类或者子接口（上面图即是常用的）；\n问：接口可以定义常量么？\n答：接口肯定是可以定义常量的，并且只能定义常量，但是其实接口中定义公有常量是不推荐的，除非这个常量与这个接口及其实现的子类有非常密切的关系，如integer的最大值等；effectiveJava一书中也明确表示不建议定义常量接口，实现常量接口会把实现细节暴露到导出的API中，并会对实现此接口的配置类造成污染。\n还有一些特别基础的问题如：抽象类与接口的区别；为什么要用接口；为什么是单继承等；\n还有一个面试题说的是==与equals的区别（String a=\"s\"），这个其实很重要，对下面介绍set、map等结构有非常重要的作用；下面就解析下这道题。\n\n### equals与==区别\n介绍之前，先说明下，java的类型包括两类，一个为基础数据类型，一个为引用类型；在没有重写equals的方法情况下，equals与==比较结果相同，都是对引用地址的比较；基础数据类型都重写了equals方法，拿string类来说，它重写了object的equals方法\n\n```\npublic boolean equals(Object anObject) {\n        if (this == anObject) {\n            return true;\n        }\n        //在不想等的情况下，判断是否为String类型，若为String类，则比较两个值是否想到\n        if (anObject instanceof String) {\n            String anotherString = (String)anObject;\n            int n = value.length;\n            if (n == anotherString.value.length) {\n                char v1[] = value;\n                char v2[] = anotherString.value;\n                int i = 0;\n                while (n-- != 0) {\n                    if (v1[i] != v2[i])\n                        return false;\n                    i++;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n```\n下面来分析下怎么来比较两个内存地址是否相同呢？有些朋友误以为默认情况下，hashCode返回的就是对象的存储地址，事实上这种看法是不全面的，确实有些JVM在实现时是直接返回对象的存储地址，但是大多时候并不是这样，只能说可能存储地址有一定关联。下面是HotSpot JVM中生成hash散列值的实现：\n\n```\nstatic inline intptr_t get_next_hash(Thread * Self, oop obj) {\n  intptr_t value = 0 ;\n  if (hashCode == 0) {\n     // This form uses an unguarded global Park-Miller RNG,\n     // so it's possible for two threads to race and generate the same RNG.\n     // On MP system we'll have lots of RW access to a global, so the\n     // mechanism induces lots of coherency traffic.\n     value = os::random() ;\n  } else\n  if (hashCode == 1) {\n     // This variation has the property of being stable (idempotent)\n     // between STW operations.  This can be useful in some of the 1-0\n     // synchronization schemes.\n     intptr_t addrBits = intptr_t(obj) >> 3 ;\n     value = addrBits ^ (addrBits >> 5) ^ GVars.stwRandom ;\n  } else\n  if (hashCode == 2) {\n     value = 1 ;            // for sensitivity testing\n  } else\n  if (hashCode == 3) {\n     value = ++GVars.hcSequence ;\n  } else\n  if (hashCode == 4) {\n     value = intptr_t(obj) ;\n  } else {\n     // Marsaglia's xor-shift scheme with thread-specific state\n     // This is probably the best overall implementation -- we'll\n     // likely make this the default in future releases.\n     unsigned t = Self->_hashStateX ;\n     t ^= (t << 11) ;\n     Self->_hashStateX = Self->_hashStateY ;\n     Self->_hashStateY = Self->_hashStateZ ;\n     Self->_hashStateZ = Self->_hashStateW ;\n     unsigned v = Self->_hashStateW ;\n     v = (v ^ (v >> 19)) ^ (t ^ (t >> 8)) ;\n     Self->_hashStateW = v ;\n     value = v ;\n  }\n \n  value &= markOopDesc::hash_mask;\n  if (value == 0) value = 0xBAD ;\n  assert (value != markOopDesc::no_hash, \"invariant\") ;\n  TEVENT (hashCode: GENERATE) ;\n  return value;\n}\n```\n　因此有人会说，可以直接根据hashcode值判断两个对象是否相等吗？肯定是不可以的，因为不同的对象可能会生成相同的hashcode值。虽然不能根据hashcode值判断两个对象是否相等，但是可以直接根据hashcode值判断两个对象不等，如果两个对象的hashcode值不等，则必定是两个不同的对象。如果要判断两个对象是否真正相等，必须通过equals方法。\n\n　　也就是说对于两个对象，如果调用equals方法得到的结果为true，则两个对象的hashcode值必定相等；\n\n　　如果equals方法得到的结果为false，则两个对象的hashcode值不一定不同；\n\n　　如果两个对象的hashcode值不等，则equals方法得到的结果必定为false；\n\n　　如果两个对象的hashcode值相等，则equals方法得到的结果未知。\n\n以上即为Collection接口的基础知识，及百度一些面试题，下一章将介绍map接口及其子类，因为set是基于map实现的，懂得map的原理也就明白了set的原理","source":"_posts/ava基础之集合框架-Collection及Map顶级接口.md","raw":"title: java基础之集合框架--Collection及Map顶级接口\ncatalog: true\nauthor: wangmj\ndate: 2019-04-18 18:29:27\nsubtitle:\nheader-img: Demo.png\ntags:\n---\n# java基础之集合框架--Collection及Map顶级接口\n\n最近看了百度的面试题，面试内容基本都是基础知识，好多问题没有答好，所以定个小目标，在年前争取把java主流的基础知识都巩固一遍；那就以使用最频繁的集合框架开始。\n\n\n## Collection及Map类图\n### collection类图\n![Collection类图](http://img.blog.csdn.net/20171030131133723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd21qNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看出来，Collection下的子接口有三个分别为Set,List,Queue，其中Set为无序的且不可重复的集合，List为有序可重复的集合，queue为先入先出的队列。\n\n### Map类图\n![这里写图片描述](http://img.blog.csdn.net/20171030131940860?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd21qNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\ncollection接口主要包含的方法如下：add()、addAll()、contain()、remove()、hashCode()、size()、toArray()等方法\n\n关于Collection接口方面百度的技术面试主要问题：\nCollection有哪些子类或者子接口（上面图即是常用的）；\n问：接口可以定义常量么？\n答：接口肯定是可以定义常量的，并且只能定义常量，但是其实接口中定义公有常量是不推荐的，除非这个常量与这个接口及其实现的子类有非常密切的关系，如integer的最大值等；effectiveJava一书中也明确表示不建议定义常量接口，实现常量接口会把实现细节暴露到导出的API中，并会对实现此接口的配置类造成污染。\n还有一些特别基础的问题如：抽象类与接口的区别；为什么要用接口；为什么是单继承等；\n还有一个面试题说的是==与equals的区别（String a=\"s\"），这个其实很重要，对下面介绍set、map等结构有非常重要的作用；下面就解析下这道题。\n\n### equals与==区别\n介绍之前，先说明下，java的类型包括两类，一个为基础数据类型，一个为引用类型；在没有重写equals的方法情况下，equals与==比较结果相同，都是对引用地址的比较；基础数据类型都重写了equals方法，拿string类来说，它重写了object的equals方法\n\n```\npublic boolean equals(Object anObject) {\n        if (this == anObject) {\n            return true;\n        }\n        //在不想等的情况下，判断是否为String类型，若为String类，则比较两个值是否想到\n        if (anObject instanceof String) {\n            String anotherString = (String)anObject;\n            int n = value.length;\n            if (n == anotherString.value.length) {\n                char v1[] = value;\n                char v2[] = anotherString.value;\n                int i = 0;\n                while (n-- != 0) {\n                    if (v1[i] != v2[i])\n                        return false;\n                    i++;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n```\n下面来分析下怎么来比较两个内存地址是否相同呢？有些朋友误以为默认情况下，hashCode返回的就是对象的存储地址，事实上这种看法是不全面的，确实有些JVM在实现时是直接返回对象的存储地址，但是大多时候并不是这样，只能说可能存储地址有一定关联。下面是HotSpot JVM中生成hash散列值的实现：\n\n```\nstatic inline intptr_t get_next_hash(Thread * Self, oop obj) {\n  intptr_t value = 0 ;\n  if (hashCode == 0) {\n     // This form uses an unguarded global Park-Miller RNG,\n     // so it's possible for two threads to race and generate the same RNG.\n     // On MP system we'll have lots of RW access to a global, so the\n     // mechanism induces lots of coherency traffic.\n     value = os::random() ;\n  } else\n  if (hashCode == 1) {\n     // This variation has the property of being stable (idempotent)\n     // between STW operations.  This can be useful in some of the 1-0\n     // synchronization schemes.\n     intptr_t addrBits = intptr_t(obj) >> 3 ;\n     value = addrBits ^ (addrBits >> 5) ^ GVars.stwRandom ;\n  } else\n  if (hashCode == 2) {\n     value = 1 ;            // for sensitivity testing\n  } else\n  if (hashCode == 3) {\n     value = ++GVars.hcSequence ;\n  } else\n  if (hashCode == 4) {\n     value = intptr_t(obj) ;\n  } else {\n     // Marsaglia's xor-shift scheme with thread-specific state\n     // This is probably the best overall implementation -- we'll\n     // likely make this the default in future releases.\n     unsigned t = Self->_hashStateX ;\n     t ^= (t << 11) ;\n     Self->_hashStateX = Self->_hashStateY ;\n     Self->_hashStateY = Self->_hashStateZ ;\n     Self->_hashStateZ = Self->_hashStateW ;\n     unsigned v = Self->_hashStateW ;\n     v = (v ^ (v >> 19)) ^ (t ^ (t >> 8)) ;\n     Self->_hashStateW = v ;\n     value = v ;\n  }\n \n  value &= markOopDesc::hash_mask;\n  if (value == 0) value = 0xBAD ;\n  assert (value != markOopDesc::no_hash, \"invariant\") ;\n  TEVENT (hashCode: GENERATE) ;\n  return value;\n}\n```\n　因此有人会说，可以直接根据hashcode值判断两个对象是否相等吗？肯定是不可以的，因为不同的对象可能会生成相同的hashcode值。虽然不能根据hashcode值判断两个对象是否相等，但是可以直接根据hashcode值判断两个对象不等，如果两个对象的hashcode值不等，则必定是两个不同的对象。如果要判断两个对象是否真正相等，必须通过equals方法。\n\n　　也就是说对于两个对象，如果调用equals方法得到的结果为true，则两个对象的hashcode值必定相等；\n\n　　如果equals方法得到的结果为false，则两个对象的hashcode值不一定不同；\n\n　　如果两个对象的hashcode值不等，则equals方法得到的结果必定为false；\n\n　　如果两个对象的hashcode值相等，则equals方法得到的结果未知。\n\n以上即为Collection接口的基础知识，及百度一些面试题，下一章将介绍map接口及其子类，因为set是基于map实现的，懂得map的原理也就明白了set的原理","slug":"ava基础之集合框架-Collection及Map顶级接口","published":1,"updated":"2019-04-18T10:30:10.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxg84hsa0005g8x1u8r2a6os","content":"<h1><span id=\"java基础之集合框架collection及map顶级接口\">java基础之集合框架–Collection及Map顶级接口</span></h1>\n<p>最近看了百度的面试题，面试内容基本都是基础知识，好多问题没有答好，所以定个小目标，在年前争取把java主流的基础知识都巩固一遍；那就以使用最频繁的集合框架开始。</p>\n<h2><span id=\"collection及map类图\">Collection及Map类图</span></h2>\n<h3><span id=\"collection类图\">collection类图</span></h3>\n<p><img src=\"http://img.blog.csdn.net/20171030131133723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd21qNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Collection类图\"></p>\n<p>可以看出来，Collection下的子接口有三个分别为Set,List,Queue，其中Set为无序的且不可重复的集合，List为有序可重复的集合，queue为先入先出的队列。</p>\n<h3><span id=\"map类图\">Map类图</span></h3>\n<p><img src=\"http://img.blog.csdn.net/20171030131940860?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd21qNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>collection接口主要包含的方法如下：add()、addAll()、contain()、remove()、hashCode()、size()、toArray()等方法</p>\n<p>关于Collection接口方面百度的技术面试主要问题：<br>\nCollection有哪些子类或者子接口（上面图即是常用的）；<br>\n问：接口可以定义常量么？<br>\n答：接口肯定是可以定义常量的，并且只能定义常量，但是其实接口中定义公有常量是不推荐的，除非这个常量与这个接口及其实现的子类有非常密切的关系，如integer的最大值等；effectiveJava一书中也明确表示不建议定义常量接口，实现常量接口会把实现细节暴露到导出的API中，并会对实现此接口的配置类造成污染。<br>\n还有一些特别基础的问题如：抽象类与接口的区别；为什么要用接口；为什么是单继承等；<br>\n还有一个面试题说的是==与equals的区别（String a=“s”），这个其实很重要，对下面介绍set、map等结构有非常重要的作用；下面就解析下这道题。</p>\n<h3><span id=\"equals与区别\">equals与==区别</span></h3>\n<p>介绍之前，先说明下，java的类型包括两类，一个为基础数据类型，一个为引用类型；在没有重写equals的方法情况下，equals与==比较结果相同，都是对引用地址的比较；基础数据类型都重写了equals方法，拿string类来说，它重写了object的equals方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean equals(Object anObject) &#123;</span><br><span class=\"line\">        if (this == anObject) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //在不想等的情况下，判断是否为String类型，若为String类，则比较两个值是否想到</span><br><span class=\"line\">        if (anObject instanceof String) &#123;</span><br><span class=\"line\">            String anotherString = (String)anObject;</span><br><span class=\"line\">            int n = value.length;</span><br><span class=\"line\">            if (n == anotherString.value.length) &#123;</span><br><span class=\"line\">                char v1[] = value;</span><br><span class=\"line\">                char v2[] = anotherString.value;</span><br><span class=\"line\">                int i = 0;</span><br><span class=\"line\">                while (n-- != 0) &#123;</span><br><span class=\"line\">                    if (v1[i] != v2[i])</span><br><span class=\"line\">                        return false;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>下面来分析下怎么来比较两个内存地址是否相同呢？有些朋友误以为默认情况下，hashCode返回的就是对象的存储地址，事实上这种看法是不全面的，确实有些JVM在实现时是直接返回对象的存储地址，但是大多时候并不是这样，只能说可能存储地址有一定关联。下面是HotSpot JVM中生成hash散列值的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline intptr_t get_next_hash(Thread * Self, oop obj) &#123;</span><br><span class=\"line\">  intptr_t value = 0 ;</span><br><span class=\"line\">  if (hashCode == 0) &#123;</span><br><span class=\"line\">     // This form uses an unguarded global Park-Miller RNG,</span><br><span class=\"line\">     // so it&apos;s possible for two threads to race and generate the same RNG.</span><br><span class=\"line\">     // On MP system we&apos;ll have lots of RW access to a global, so the</span><br><span class=\"line\">     // mechanism induces lots of coherency traffic.</span><br><span class=\"line\">     value = os::random() ;</span><br><span class=\"line\">  &#125; else</span><br><span class=\"line\">  if (hashCode == 1) &#123;</span><br><span class=\"line\">     // This variation has the property of being stable (idempotent)</span><br><span class=\"line\">     // between STW operations.  This can be useful in some of the 1-0</span><br><span class=\"line\">     // synchronization schemes.</span><br><span class=\"line\">     intptr_t addrBits = intptr_t(obj) &gt;&gt; 3 ;</span><br><span class=\"line\">     value = addrBits ^ (addrBits &gt;&gt; 5) ^ GVars.stwRandom ;</span><br><span class=\"line\">  &#125; else</span><br><span class=\"line\">  if (hashCode == 2) &#123;</span><br><span class=\"line\">     value = 1 ;            // for sensitivity testing</span><br><span class=\"line\">  &#125; else</span><br><span class=\"line\">  if (hashCode == 3) &#123;</span><br><span class=\"line\">     value = ++GVars.hcSequence ;</span><br><span class=\"line\">  &#125; else</span><br><span class=\"line\">  if (hashCode == 4) &#123;</span><br><span class=\"line\">     value = intptr_t(obj) ;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">     // Marsaglia&apos;s xor-shift scheme with thread-specific state</span><br><span class=\"line\">     // This is probably the best overall implementation -- we&apos;ll</span><br><span class=\"line\">     // likely make this the default in future releases.</span><br><span class=\"line\">     unsigned t = Self-&gt;_hashStateX ;</span><br><span class=\"line\">     t ^= (t &lt;&lt; 11) ;</span><br><span class=\"line\">     Self-&gt;_hashStateX = Self-&gt;_hashStateY ;</span><br><span class=\"line\">     Self-&gt;_hashStateY = Self-&gt;_hashStateZ ;</span><br><span class=\"line\">     Self-&gt;_hashStateZ = Self-&gt;_hashStateW ;</span><br><span class=\"line\">     unsigned v = Self-&gt;_hashStateW ;</span><br><span class=\"line\">     v = (v ^ (v &gt;&gt; 19)) ^ (t ^ (t &gt;&gt; 8)) ;</span><br><span class=\"line\">     Self-&gt;_hashStateW = v ;</span><br><span class=\"line\">     value = v ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  value &amp;= markOopDesc::hash_mask;</span><br><span class=\"line\">  if (value == 0) value = 0xBAD ;</span><br><span class=\"line\">  assert (value != markOopDesc::no_hash, &quot;invariant&quot;) ;</span><br><span class=\"line\">  TEVENT (hashCode: GENERATE) ;</span><br><span class=\"line\">  return value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此有人会说，可以直接根据hashcode值判断两个对象是否相等吗？肯定是不可以的，因为不同的对象可能会生成相同的hashcode值。虽然不能根据hashcode值判断两个对象是否相等，但是可以直接根据hashcode值判断两个对象不等，如果两个对象的hashcode值不等，则必定是两个不同的对象。如果要判断两个对象是否真正相等，必须通过equals方法。</p>\n<p>也就是说对于两个对象，如果调用equals方法得到的结果为true，则两个对象的hashcode值必定相等；</p>\n<p>如果equals方法得到的结果为false，则两个对象的hashcode值不一定不同；</p>\n<p>如果两个对象的hashcode值不等，则equals方法得到的结果必定为false；</p>\n<p>如果两个对象的hashcode值相等，则equals方法得到的结果未知。</p>\n<p>以上即为Collection接口的基础知识，及百度一些面试题，下一章将介绍map接口及其子类，因为set是基于map实现的，懂得map的原理也就明白了set的原理</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>java基础之集合框架–Collection及Map顶级接口</h1>\n<p>最近看了百度的面试题，面试内容基本都是基础知识，好多问题没有答好，所以定个小目标，在年前争取把java主流的基础知识都巩固一遍；那就以使用最频繁的集合框架开始。</p>\n<h2>Collection及Map类图</h2>\n<h3>collection类图</h3>\n<p><img src=\"http://img.blog.csdn.net/20171030131133723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd21qNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Collection类图\"></p>\n<p>可以看出来，Collection下的子接口有三个分别为Set,List,Queue，其中Set为无序的且不可重复的集合，List为有序可重复的集合，queue为先入先出的队列。</p>\n<h3>Map类图</h3>\n<p><img src=\"http://img.blog.csdn.net/20171030131940860?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd21qNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>collection接口主要包含的方法如下：add()、addAll()、contain()、remove()、hashCode()、size()、toArray()等方法</p>\n<p>关于Collection接口方面百度的技术面试主要问题：<br>\nCollection有哪些子类或者子接口（上面图即是常用的）；<br>\n问：接口可以定义常量么？<br>\n答：接口肯定是可以定义常量的，并且只能定义常量，但是其实接口中定义公有常量是不推荐的，除非这个常量与这个接口及其实现的子类有非常密切的关系，如integer的最大值等；effectiveJava一书中也明确表示不建议定义常量接口，实现常量接口会把实现细节暴露到导出的API中，并会对实现此接口的配置类造成污染。<br>\n还有一些特别基础的问题如：抽象类与接口的区别；为什么要用接口；为什么是单继承等；<br>\n还有一个面试题说的是==与equals的区别（String a=“s”），这个其实很重要，对下面介绍set、map等结构有非常重要的作用；下面就解析下这道题。</p>\n<h3>equals与==区别</h3>\n<p>介绍之前，先说明下，java的类型包括两类，一个为基础数据类型，一个为引用类型；在没有重写equals的方法情况下，equals与==比较结果相同，都是对引用地址的比较；基础数据类型都重写了equals方法，拿string类来说，它重写了object的equals方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean equals(Object anObject) &#123;</span><br><span class=\"line\">        if (this == anObject) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //在不想等的情况下，判断是否为String类型，若为String类，则比较两个值是否想到</span><br><span class=\"line\">        if (anObject instanceof String) &#123;</span><br><span class=\"line\">            String anotherString = (String)anObject;</span><br><span class=\"line\">            int n = value.length;</span><br><span class=\"line\">            if (n == anotherString.value.length) &#123;</span><br><span class=\"line\">                char v1[] = value;</span><br><span class=\"line\">                char v2[] = anotherString.value;</span><br><span class=\"line\">                int i = 0;</span><br><span class=\"line\">                while (n-- != 0) &#123;</span><br><span class=\"line\">                    if (v1[i] != v2[i])</span><br><span class=\"line\">                        return false;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>下面来分析下怎么来比较两个内存地址是否相同呢？有些朋友误以为默认情况下，hashCode返回的就是对象的存储地址，事实上这种看法是不全面的，确实有些JVM在实现时是直接返回对象的存储地址，但是大多时候并不是这样，只能说可能存储地址有一定关联。下面是HotSpot JVM中生成hash散列值的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline intptr_t get_next_hash(Thread * Self, oop obj) &#123;</span><br><span class=\"line\">  intptr_t value = 0 ;</span><br><span class=\"line\">  if (hashCode == 0) &#123;</span><br><span class=\"line\">     // This form uses an unguarded global Park-Miller RNG,</span><br><span class=\"line\">     // so it&apos;s possible for two threads to race and generate the same RNG.</span><br><span class=\"line\">     // On MP system we&apos;ll have lots of RW access to a global, so the</span><br><span class=\"line\">     // mechanism induces lots of coherency traffic.</span><br><span class=\"line\">     value = os::random() ;</span><br><span class=\"line\">  &#125; else</span><br><span class=\"line\">  if (hashCode == 1) &#123;</span><br><span class=\"line\">     // This variation has the property of being stable (idempotent)</span><br><span class=\"line\">     // between STW operations.  This can be useful in some of the 1-0</span><br><span class=\"line\">     // synchronization schemes.</span><br><span class=\"line\">     intptr_t addrBits = intptr_t(obj) &gt;&gt; 3 ;</span><br><span class=\"line\">     value = addrBits ^ (addrBits &gt;&gt; 5) ^ GVars.stwRandom ;</span><br><span class=\"line\">  &#125; else</span><br><span class=\"line\">  if (hashCode == 2) &#123;</span><br><span class=\"line\">     value = 1 ;            // for sensitivity testing</span><br><span class=\"line\">  &#125; else</span><br><span class=\"line\">  if (hashCode == 3) &#123;</span><br><span class=\"line\">     value = ++GVars.hcSequence ;</span><br><span class=\"line\">  &#125; else</span><br><span class=\"line\">  if (hashCode == 4) &#123;</span><br><span class=\"line\">     value = intptr_t(obj) ;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">     // Marsaglia&apos;s xor-shift scheme with thread-specific state</span><br><span class=\"line\">     // This is probably the best overall implementation -- we&apos;ll</span><br><span class=\"line\">     // likely make this the default in future releases.</span><br><span class=\"line\">     unsigned t = Self-&gt;_hashStateX ;</span><br><span class=\"line\">     t ^= (t &lt;&lt; 11) ;</span><br><span class=\"line\">     Self-&gt;_hashStateX = Self-&gt;_hashStateY ;</span><br><span class=\"line\">     Self-&gt;_hashStateY = Self-&gt;_hashStateZ ;</span><br><span class=\"line\">     Self-&gt;_hashStateZ = Self-&gt;_hashStateW ;</span><br><span class=\"line\">     unsigned v = Self-&gt;_hashStateW ;</span><br><span class=\"line\">     v = (v ^ (v &gt;&gt; 19)) ^ (t ^ (t &gt;&gt; 8)) ;</span><br><span class=\"line\">     Self-&gt;_hashStateW = v ;</span><br><span class=\"line\">     value = v ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  value &amp;= markOopDesc::hash_mask;</span><br><span class=\"line\">  if (value == 0) value = 0xBAD ;</span><br><span class=\"line\">  assert (value != markOopDesc::no_hash, &quot;invariant&quot;) ;</span><br><span class=\"line\">  TEVENT (hashCode: GENERATE) ;</span><br><span class=\"line\">  return value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此有人会说，可以直接根据hashcode值判断两个对象是否相等吗？肯定是不可以的，因为不同的对象可能会生成相同的hashcode值。虽然不能根据hashcode值判断两个对象是否相等，但是可以直接根据hashcode值判断两个对象不等，如果两个对象的hashcode值不等，则必定是两个不同的对象。如果要判断两个对象是否真正相等，必须通过equals方法。</p>\n<p>也就是说对于两个对象，如果调用equals方法得到的结果为true，则两个对象的hashcode值必定相等；</p>\n<p>如果equals方法得到的结果为false，则两个对象的hashcode值不一定不同；</p>\n<p>如果两个对象的hashcode值不等，则equals方法得到的结果必定为false；</p>\n<p>如果两个对象的hashcode值相等，则equals方法得到的结果未知。</p>\n<p>以上即为Collection接口的基础知识，及百度一些面试题，下一章将介绍map接口及其子类，因为set是基于map实现的，懂得map的原理也就明白了set的原理</p>\n"},{"title":"mysql 拆分以逗号隔开的字段并应用在in查询","catalog":true,"author":"wangmj","date":"2019-04-18T10:26:44.000Z","subtitle":null,"header-img":"Demo.png","_content":"# mysql 拆分以逗号隔开的字段并应用在in查询\n\n利用substring_index及笛卡尔积来循环拆分sql字段；\n\n首先建立几条数据\n\n| id      |    value |\n| :-------- |  :--: |\n| Computer  |  5,ddd,eee   |\n| Phone     |    12,3333,11  |\n| Pipe      |   234  |\n\n假如我们需要查询的字段in phone字段的值(12,3333,11)，我们可以用一下方法\n\n###具体方法\n```python\n准备示例数据\ncreate table tbl_name (ID int ,mSize varchar(100));\ninsert into tbl_name values (1,'tiny,small,big');\ninsert into tbl_name values (2,'small,medium');\ninsert into tbl_name values (3,'tiny,big');\n\n实现行列转换的SQL\nselect * from table where phone in (\n\tselect  \n\t\tsubstring_index(substring_index(a.mSize,','\n\t\t,b.help_topic_id+1),',',-1) \n\tfrom \n\t\ttbl_name a\n\tjoin\n\t\tmysql.help_topic b\n\t\ton b.help_topic_id < (length(a.mSize) -     length(replace(a.mSize,',',''))+1)\n\torder by a.ID;\n)\n```\n\n\n**原理分析**　\n这个join最基本原理是笛卡尔积。通过这个方式来实现循环。 以下是具体问题分析： length(a.Size) - length(replace(a.mSize,',',''))+1 表示了，按照逗号分割后，改列拥有的数值数量，下面简称n join过程的伪代码：\n```python\n根据ID进行循环\n{\n    判断：i 是否 <= n\n    {\n        获取最靠近第 i 个逗号之前的数据， 即 substring_index(substring_index(a.mSize,',',b.ID),',',-1)\n        i = i +1 \n    }\n    ID = ID +1 \n}\n```\n以上及实现了字段按逗号分隔来用作in的子查询","source":"_posts/ysql-拆分以逗号隔开的字段并应用在in查询.md","raw":"title: mysql 拆分以逗号隔开的字段并应用在in查询\ncatalog: true\nauthor: wangmj\ndate: 2019-04-18 18:26:44\nsubtitle:\nheader-img: Demo.png\ntags:\n---\n# mysql 拆分以逗号隔开的字段并应用在in查询\n\n利用substring_index及笛卡尔积来循环拆分sql字段；\n\n首先建立几条数据\n\n| id      |    value |\n| :-------- |  :--: |\n| Computer  |  5,ddd,eee   |\n| Phone     |    12,3333,11  |\n| Pipe      |   234  |\n\n假如我们需要查询的字段in phone字段的值(12,3333,11)，我们可以用一下方法\n\n###具体方法\n```python\n准备示例数据\ncreate table tbl_name (ID int ,mSize varchar(100));\ninsert into tbl_name values (1,'tiny,small,big');\ninsert into tbl_name values (2,'small,medium');\ninsert into tbl_name values (3,'tiny,big');\n\n实现行列转换的SQL\nselect * from table where phone in (\n\tselect  \n\t\tsubstring_index(substring_index(a.mSize,','\n\t\t,b.help_topic_id+1),',',-1) \n\tfrom \n\t\ttbl_name a\n\tjoin\n\t\tmysql.help_topic b\n\t\ton b.help_topic_id < (length(a.mSize) -     length(replace(a.mSize,',',''))+1)\n\torder by a.ID;\n)\n```\n\n\n**原理分析**　\n这个join最基本原理是笛卡尔积。通过这个方式来实现循环。 以下是具体问题分析： length(a.Size) - length(replace(a.mSize,',',''))+1 表示了，按照逗号分割后，改列拥有的数值数量，下面简称n join过程的伪代码：\n```python\n根据ID进行循环\n{\n    判断：i 是否 <= n\n    {\n        获取最靠近第 i 个逗号之前的数据， 即 substring_index(substring_index(a.mSize,',',b.ID),',',-1)\n        i = i +1 \n    }\n    ID = ID +1 \n}\n```\n以上及实现了字段按逗号分隔来用作in的子查询","slug":"ysql-拆分以逗号隔开的字段并应用在in查询","published":1,"updated":"2019-04-18T10:27:59.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxg84hsc0006g8x1xx4ofb64","content":"<h1><span id=\"mysql-拆分以逗号隔开的字段并应用在in查询\">mysql 拆分以逗号隔开的字段并应用在in查询</span></h1>\n<p>利用substring_index及笛卡尔积来循环拆分sql字段；</p>\n<p>首先建立几条数据</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">id</th>\n<th style=\"text-align:center\">value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Computer</td>\n<td style=\"text-align:center\">5,ddd,eee</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Phone</td>\n<td style=\"text-align:center\">12,3333,11</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pipe</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<p>假如我们需要查询的字段in phone字段的值(12,3333,11)，我们可以用一下方法</p>\n<p>###具体方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">准备示例数据</span><br><span class=\"line\">create table tbl_name (ID int ,mSize varchar(<span class=\"number\">100</span>));</span><br><span class=\"line\">insert into tbl_name values (<span class=\"number\">1</span>,<span class=\"string\">'tiny,small,big'</span>);</span><br><span class=\"line\">insert into tbl_name values (<span class=\"number\">2</span>,<span class=\"string\">'small,medium'</span>);</span><br><span class=\"line\">insert into tbl_name values (<span class=\"number\">3</span>,<span class=\"string\">'tiny,big'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">实现行列转换的SQL</span><br><span class=\"line\">select * <span class=\"keyword\">from</span> table where phone <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\tselect  </span><br><span class=\"line\">\t\tsubstring_index(substring_index(a.mSize,<span class=\"string\">','</span></span><br><span class=\"line\">\t\t,b.help_topic_id+<span class=\"number\">1</span>),<span class=\"string\">','</span>,<span class=\"number\">-1</span>) </span><br><span class=\"line\">\t<span class=\"keyword\">from</span> </span><br><span class=\"line\">\t\ttbl_name a</span><br><span class=\"line\">\tjoin</span><br><span class=\"line\">\t\tmysql.help_topic b</span><br><span class=\"line\">\t\ton b.help_topic_id &lt; (length(a.mSize) -     length(replace(a.mSize,<span class=\"string\">','</span>,<span class=\"string\">''</span>))+<span class=\"number\">1</span>)</span><br><span class=\"line\">\torder by a.ID;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>原理分析</strong>　<br>\n这个join最基本原理是笛卡尔积。通过这个方式来实现循环。 以下是具体问题分析： length(a.Size) - length(replace(a.mSize,’,’,’’))+1 表示了，按照逗号分割后，改列拥有的数值数量，下面简称n join过程的伪代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据ID进行循环</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    判断：i 是否 &lt;= n</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        获取最靠近第 i 个逗号之前的数据， 即 substring_index(substring_index(a.mSize,<span class=\"string\">','</span>,b.ID),<span class=\"string\">','</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">        i = i +<span class=\"number\">1</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ID = ID +<span class=\"number\">1</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上及实现了字段按逗号分隔来用作in的子查询</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>mysql 拆分以逗号隔开的字段并应用在in查询</h1>\n<p>利用substring_index及笛卡尔积来循环拆分sql字段；</p>\n<p>首先建立几条数据</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">id</th>\n<th style=\"text-align:center\">value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Computer</td>\n<td style=\"text-align:center\">5,ddd,eee</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Phone</td>\n<td style=\"text-align:center\">12,3333,11</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pipe</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<p>假如我们需要查询的字段in phone字段的值(12,3333,11)，我们可以用一下方法</p>\n<p>###具体方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">准备示例数据</span><br><span class=\"line\">create table tbl_name (ID int ,mSize varchar(<span class=\"number\">100</span>));</span><br><span class=\"line\">insert into tbl_name values (<span class=\"number\">1</span>,<span class=\"string\">'tiny,small,big'</span>);</span><br><span class=\"line\">insert into tbl_name values (<span class=\"number\">2</span>,<span class=\"string\">'small,medium'</span>);</span><br><span class=\"line\">insert into tbl_name values (<span class=\"number\">3</span>,<span class=\"string\">'tiny,big'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">实现行列转换的SQL</span><br><span class=\"line\">select * <span class=\"keyword\">from</span> table where phone <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\tselect  </span><br><span class=\"line\">\t\tsubstring_index(substring_index(a.mSize,<span class=\"string\">','</span></span><br><span class=\"line\">\t\t,b.help_topic_id+<span class=\"number\">1</span>),<span class=\"string\">','</span>,<span class=\"number\">-1</span>) </span><br><span class=\"line\">\t<span class=\"keyword\">from</span> </span><br><span class=\"line\">\t\ttbl_name a</span><br><span class=\"line\">\tjoin</span><br><span class=\"line\">\t\tmysql.help_topic b</span><br><span class=\"line\">\t\ton b.help_topic_id &lt; (length(a.mSize) -     length(replace(a.mSize,<span class=\"string\">','</span>,<span class=\"string\">''</span>))+<span class=\"number\">1</span>)</span><br><span class=\"line\">\torder by a.ID;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>原理分析</strong>　<br>\n这个join最基本原理是笛卡尔积。通过这个方式来实现循环。 以下是具体问题分析： length(a.Size) - length(replace(a.mSize,’,’,’’))+1 表示了，按照逗号分割后，改列拥有的数值数量，下面简称n join过程的伪代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据ID进行循环</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    判断：i 是否 &lt;= n</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        获取最靠近第 i 个逗号之前的数据， 即 substring_index(substring_index(a.mSize,<span class=\"string\">','</span>,b.ID),<span class=\"string\">','</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">        i = i +<span class=\"number\">1</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ID = ID +<span class=\"number\">1</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上及实现了字段按逗号分隔来用作in的子查询</p>\n"},{"title":"hexo+github博客从搭建到部署到更换电脑快速切换","catalog":true,"date":"2019-06-28T13:19:00.000Z","subtitle":null,"header-img":null,"_content":"### hexo+github博客搭建\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n- Node.js (Should be at least nodejs 6.9)\n- Git\n\n##### Windows 用户\n对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n您也可以下载[安装程序](http://nodejs.org/)来安装。\n#### 安装hexo\n```\n npm install -g hexo-cli\n\n```\n请参考官网教程来搭建\n[官网教程](https://hexo.io/zh-cn/)\n\n### 更换电脑hexo快速切换\n请参照教程[教程](https://blog.csdn.net/heimu24/article/details/81210640)\n","source":"_posts/你好，hexo.md","raw":"title: hexo+github博客从搭建到部署到更换电脑快速切换\ncatalog: true\ntags: []\ncategories: []\ndate: 2019-06-28 21:19:00\nsubtitle:\nheader-img:\n---\n### hexo+github博客搭建\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n- Node.js (Should be at least nodejs 6.9)\n- Git\n\n##### Windows 用户\n对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n您也可以下载[安装程序](http://nodejs.org/)来安装。\n#### 安装hexo\n```\n npm install -g hexo-cli\n\n```\n请参考官网教程来搭建\n[官网教程](https://hexo.io/zh-cn/)\n\n### 更换电脑hexo快速切换\n请参照教程[教程](https://blog.csdn.net/heimu24/article/details/81210640)\n","slug":"你好，hexo","published":1,"updated":"2019-06-29T08:23:41.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh9du3c00033kx1yx5nzwqf","content":"<h3><span id=\"hexogithub博客搭建\">hexo+github博客搭建</span></h3>\n<p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<ul>\n<li>Node.js (Should be at least nodejs 6.9)</li>\n<li>Git</li>\n</ul>\n<h5><span id=\"windows-用户\">Windows 用户</span></h5>\n<p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br>\n另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。<br>\n您也可以下载<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">安装程序</a>来安装。</p>\n<h4><span id=\"安装hexo\">安装hexo</span></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>请参考官网教程来搭建<br>\n<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">官网教程</a></p>\n<h3><span id=\"更换电脑hexo快速切换\">更换电脑hexo快速切换</span></h3>\n<p>请参照教程<a href=\"https://blog.csdn.net/heimu24/article/details/81210640\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>hexo+github博客搭建</h3>\n<p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<ul>\n<li>Node.js (Should be at least nodejs 6.9)</li>\n<li>Git</li>\n</ul>\n<h5>Windows 用户</h5>\n<p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br>\n另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。<br>\n您也可以下载<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">安装程序</a>来安装。</p>\n<h4>安装hexo</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>请参考官网教程来搭建<br>\n<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">官网教程</a></p>\n<h3>更换电脑hexo快速切换</h3>\n<p>请参照教程<a href=\"https://blog.csdn.net/heimu24/article/details/81210640\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/ava基础之集合框架-Collection及Map顶级接口/home_posts_tag-false.png","slug":"home_posts_tag-false.png","post":"cjxg84hsa0005g8x1u8r2a6os","modified":0,"renderable":0},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-false.png","slug":"home_posts_tag-false.png","post":"cjxg84hry0001g8x10fxrby8j","modified":0,"renderable":0},{"_id":"source/_posts/ysql-拆分以逗号隔开的字段并应用在in查询/home_posts_tag-false.png","slug":"home_posts_tag-false.png","post":"cjxg84hsc0006g8x1xx4ofb64","modified":0,"renderable":0},{"_id":"source/_posts/ava基础之集合框架-Collection及Map顶级接口/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"cjxg84hsa0005g8x1u8r2a6os","modified":0,"renderable":0},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"cjxg84hry0001g8x10fxrby8j","modified":0,"renderable":0},{"_id":"source/_posts/ysql-拆分以逗号隔开的字段并应用在in查询/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"cjxg84hsc0006g8x1xx4ofb64","modified":0,"renderable":0},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","slug":"Demo.png","post":"cjxg84hry0001g8x10fxrby8j","modified":0,"renderable":0},{"_id":"source/_posts/ava基础之集合框架-Collection及Map顶级接口/Demo.png","slug":"Demo.png","post":"cjxg84hsa0005g8x1u8r2a6os","modified":0,"renderable":0},{"_id":"source/_posts/ysql-拆分以逗号隔开的字段并应用在in查询/Demo.png","slug":"Demo.png","post":"cjxg84hsc0006g8x1xx4ofb64","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjxg84hry0001g8x10fxrby8j","tag_id":"cjxg84hs70004g8x1dziucjee","_id":"cjxg84hsj0008g8x143xv8ju3"},{"post_id":"cjxg84hry0001g8x10fxrby8j","tag_id":"cjxg84hse0007g8x1v9qwgeqp","_id":"cjxg84hsn0009g8x1q5csjfym"}],"Tag":[{"name":"Hexo","_id":"cjxg84hs70004g8x1dziucjee"},{"name":"Blog","_id":"cjxg84hse0007g8x1v9qwgeqp"}]}}